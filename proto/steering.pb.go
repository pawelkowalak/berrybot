// Code generated by protoc-gen-go.
// source: steering.proto
// DO NOT EDIT!

/*
Package steering is a generated protocol buffer package.

It is generated from these files:
	steering.proto

It has these top-level messages:
	Direction
	Telemetry
*/
package steering

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Direction is normalized delta x and y that corresponds to joystick position. Range should be between -100 and 100.
type Direction struct {
	Dx int32 `protobuf:"varint,1,opt,name=dx" json:"dx,omitempty"`
	Dy int32 `protobuf:"varint,2,opt,name=dy" json:"dy,omitempty"`
}

func (m *Direction) Reset()         { *m = Direction{} }
func (m *Direction) String() string { return proto.CompactTextString(m) }
func (*Direction) ProtoMessage()    {}

type Telemetry struct {
	Speed     int32 `protobuf:"varint,1,opt,name=speed" json:"speed,omitempty"`
	DistFront int32 `protobuf:"varint,2,opt,name=distFront" json:"distFront,omitempty"`
	DistRear  int32 `protobuf:"varint,3,opt,name=distRear" json:"distRear,omitempty"`
}

func (m *Telemetry) Reset()         { *m = Telemetry{} }
func (m *Telemetry) String() string { return proto.CompactTextString(m) }
func (*Telemetry) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Driver service

type DriverClient interface {
	// Drive is a client-to-server stream providing direction.
	Drive(ctx context.Context, opts ...grpc.CallOption) (Driver_DriveClient, error)
}

type driverClient struct {
	cc *grpc.ClientConn
}

func NewDriverClient(cc *grpc.ClientConn) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) Drive(ctx context.Context, opts ...grpc.CallOption) (Driver_DriveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Driver_serviceDesc.Streams[0], c.cc, "/steering.Driver/Drive", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverDriveClient{stream}
	return x, nil
}

type Driver_DriveClient interface {
	Send(*Direction) error
	Recv() (*Telemetry, error)
	grpc.ClientStream
}

type driverDriveClient struct {
	grpc.ClientStream
}

func (x *driverDriveClient) Send(m *Direction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *driverDriveClient) Recv() (*Telemetry, error) {
	m := new(Telemetry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Driver service

type DriverServer interface {
	// Drive is a client-to-server stream providing direction.
	Drive(Driver_DriveServer) error
}

func RegisterDriverServer(s *grpc.Server, srv DriverServer) {
	s.RegisterService(&_Driver_serviceDesc, srv)
}

func _Driver_Drive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DriverServer).Drive(&driverDriveServer{stream})
}

type Driver_DriveServer interface {
	Send(*Telemetry) error
	Recv() (*Direction, error)
	grpc.ServerStream
}

type driverDriveServer struct {
	grpc.ServerStream
}

func (x *driverDriveServer) Send(m *Telemetry) error {
	return x.ServerStream.SendMsg(m)
}

func (x *driverDriveServer) Recv() (*Direction, error) {
	m := new(Direction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Driver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "steering.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Drive",
			Handler:       _Driver_Drive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
